
cmake_minimum_required (VERSION 2.8)
project (lzoScalaWrapper)

set (Tutorial_VERSION_MAJOR 1)
set (Tutorial_VERSION_MINOR 0)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wl,--no-as-needed")

set (PROJECT_BINARY_DIR ./)
set (PROJECT_SOURCE_DIR ./)
set (COMPRESS_SOURCE_DIR ./src/)
#set (COMMON_SOURCES ${COMPRESS_SOURCE_DIR}/lzo_fpga.cpp ${COMPRESS_SOURCE_DIR}/tools.cpp ${COMPRESS_SOURCE_DIR}/ipp_compressor.cpp)
set (COMMON_SOURCES ${COMPRESS_SOURCE_DIR}/lzo_fpga.cpp ${COMPRESS_SOURCE_DIR}/tools.cpp)
set (UMD_API ./include/)

#set(IPPROOT $ENV{IPPROOT})

#if(NOT IPPROOT)
#  message(FATAL_ERROR "Need to source IPP!")
#endif()
#set (IPP_HEADERS ${IPPROOT}/include)

set (SYSTEM_JNI_HEADER_DIR /usr/lib/jvm/java-7-openjdk-amd64/include/)

set(BINARY_DESTINATION ${PROJECT_BINARY_DIR}/bin CACHE PATH "path for binaries installation")

# configure a header file to pass some of the CMake settings
# to the source code
configure_file (
  "${PROJECT_SOURCE_DIR}/deCompressScalaJni.h.in"
  "${PROJECT_BINARY_DIR}/com_hadoop_compression_lzo_FpgaDecompressor.h" 
#this header is generated by maven
  )

# add the binary tree to the search path for include files
# so that we will find TutorialConfig.h
add_definitions(-DHW_TSC)
include_directories("${PROJECT_BINARY_DIR}")
include_directories(${SYSTEM_JNI_HEADER_DIR})
include_directories(${UMD_API})
#include_directories(${IPP_HEADERS})


#add_library(CompressScalaJni SHARED CompressScalaJni.cpp ./src/tools.cpp)
add_library(FpgaDecompressor SHARED FpgaDecompressor.cpp ${COMMON_SOURCES})
#target_link_libraries(FpgaDecompressor ltdl ippi ippcore ippdc ipps pthread)
target_link_libraries(FpgaDecompressor ltdl pthread)

#add_executable(Sample1a Sample1.cpp)
#TARGET_LINK_LIBRARIES(Sample1a Sample1a)

